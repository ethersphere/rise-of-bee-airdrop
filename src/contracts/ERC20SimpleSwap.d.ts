/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ERC20SimpleSwapInterface extends ethers.utils.Interface {
  functions: {
    "CASHOUT_TYPEHASH()": FunctionFragment;
    "CHEQUE_TYPEHASH()": FunctionFragment;
    "CUSTOMDECREASETIMEOUT_TYPEHASH()": FunctionFragment;
    "EIP712DOMAIN_TYPEHASH()": FunctionFragment;
    "balance()": FunctionFragment;
    "bounced()": FunctionFragment;
    "cashCheque(address,address,uint256,bytes,uint256,bytes)": FunctionFragment;
    "cashChequeBeneficiary(address,uint256,bytes)": FunctionFragment;
    "decreaseHardDeposit(address)": FunctionFragment;
    "defaultHardDepositTimeout()": FunctionFragment;
    "hardDeposits(address)": FunctionFragment;
    "increaseHardDeposit(address,uint256)": FunctionFragment;
    "init(address,address,uint256)": FunctionFragment;
    "issuer()": FunctionFragment;
    "liquidBalance()": FunctionFragment;
    "liquidBalanceFor(address)": FunctionFragment;
    "paidOut(address)": FunctionFragment;
    "prepareDecreaseHardDeposit(address,uint256)": FunctionFragment;
    "setCustomHardDepositTimeout(address,uint256,bytes)": FunctionFragment;
    "token()": FunctionFragment;
    "totalHardDeposit()": FunctionFragment;
    "totalPaidOut()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "CASHOUT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CHEQUE_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CUSTOMDECREASETIMEOUT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EIP712DOMAIN_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "balance", values?: undefined): string;
  encodeFunctionData(functionFragment: "bounced", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cashCheque",
    values: [string, string, BigNumberish, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cashChequeBeneficiary",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseHardDeposit",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultHardDepositTimeout",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hardDeposits",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseHardDeposit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "issuer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "liquidBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidBalanceFor",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "paidOut", values: [string]): string;
  encodeFunctionData(
    functionFragment: "prepareDecreaseHardDeposit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCustomHardDepositTimeout",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalHardDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalPaidOut",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "CASHOUT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CHEQUE_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CUSTOMDECREASETIMEOUT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EIP712DOMAIN_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bounced", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cashCheque", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cashChequeBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseHardDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultHardDepositTimeout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hardDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseHardDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "issuer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidBalanceFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paidOut", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "prepareDecreaseHardDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCustomHardDepositTimeout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalHardDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalPaidOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "ChequeBounced()": EventFragment;
    "ChequeCashed(address,address,address,uint256,uint256,uint256)": EventFragment;
    "HardDepositAmountChanged(address,uint256)": EventFragment;
    "HardDepositDecreasePrepared(address,uint256)": EventFragment;
    "HardDepositTimeoutChanged(address,uint256)": EventFragment;
    "Withdraw(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChequeBounced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChequeCashed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HardDepositAmountChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "HardDepositDecreasePrepared"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HardDepositTimeoutChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export class ERC20SimpleSwap extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ERC20SimpleSwapInterface;

  functions: {
    CASHOUT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    "CASHOUT_TYPEHASH()"(overrides?: CallOverrides): Promise<[string]>;

    CHEQUE_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    "CHEQUE_TYPEHASH()"(overrides?: CallOverrides): Promise<[string]>;

    CUSTOMDECREASETIMEOUT_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<[string]>;

    "CUSTOMDECREASETIMEOUT_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<[string]>;

    EIP712DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    "EIP712DOMAIN_TYPEHASH()"(overrides?: CallOverrides): Promise<[string]>;

    balance(overrides?: CallOverrides): Promise<[BigNumber]>;

    "balance()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    bounced(overrides?: CallOverrides): Promise<[boolean]>;

    "bounced()"(overrides?: CallOverrides): Promise<[boolean]>;

    cashCheque(
      beneficiary: string,
      recipient: string,
      cumulativePayout: BigNumberish,
      beneficiarySig: BytesLike,
      callerPayout: BigNumberish,
      issuerSig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "cashCheque(address,address,uint256,bytes,uint256,bytes)"(
      beneficiary: string,
      recipient: string,
      cumulativePayout: BigNumberish,
      beneficiarySig: BytesLike,
      callerPayout: BigNumberish,
      issuerSig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cashChequeBeneficiary(
      recipient: string,
      cumulativePayout: BigNumberish,
      issuerSig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "cashChequeBeneficiary(address,uint256,bytes)"(
      recipient: string,
      cumulativePayout: BigNumberish,
      issuerSig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decreaseHardDeposit(
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "decreaseHardDeposit(address)"(
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    defaultHardDepositTimeout(overrides?: CallOverrides): Promise<[BigNumber]>;

    "defaultHardDepositTimeout()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hardDeposits(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        decreaseAmount: BigNumber;
        timeout: BigNumber;
        canBeDecreasedAt: BigNumber;
      }
    >;

    "hardDeposits(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        decreaseAmount: BigNumber;
        timeout: BigNumber;
        canBeDecreasedAt: BigNumber;
      }
    >;

    increaseHardDeposit(
      beneficiary: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "increaseHardDeposit(address,uint256)"(
      beneficiary: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    init(
      _issuer: string,
      _token: string,
      _defaultHardDepositTimeout: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "init(address,address,uint256)"(
      _issuer: string,
      _token: string,
      _defaultHardDepositTimeout: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    issuer(overrides?: CallOverrides): Promise<[string]>;

    "issuer()"(overrides?: CallOverrides): Promise<[string]>;

    liquidBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    "liquidBalance()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidBalanceFor(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "liquidBalanceFor(address)"(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    paidOut(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "paidOut(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    prepareDecreaseHardDeposit(
      beneficiary: string,
      decreaseAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "prepareDecreaseHardDeposit(address,uint256)"(
      beneficiary: string,
      decreaseAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCustomHardDepositTimeout(
      beneficiary: string,
      hardDepositTimeout: BigNumberish,
      beneficiarySig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setCustomHardDepositTimeout(address,uint256,bytes)"(
      beneficiary: string,
      hardDepositTimeout: BigNumberish,
      beneficiarySig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;

    "token()"(overrides?: CallOverrides): Promise<[string]>;

    totalHardDeposit(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalHardDeposit()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalPaidOut(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalPaidOut()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  CASHOUT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  "CASHOUT_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

  CHEQUE_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  "CHEQUE_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

  CUSTOMDECREASETIMEOUT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  "CUSTOMDECREASETIMEOUT_TYPEHASH()"(
    overrides?: CallOverrides
  ): Promise<string>;

  EIP712DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  "EIP712DOMAIN_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

  balance(overrides?: CallOverrides): Promise<BigNumber>;

  "balance()"(overrides?: CallOverrides): Promise<BigNumber>;

  bounced(overrides?: CallOverrides): Promise<boolean>;

  "bounced()"(overrides?: CallOverrides): Promise<boolean>;

  cashCheque(
    beneficiary: string,
    recipient: string,
    cumulativePayout: BigNumberish,
    beneficiarySig: BytesLike,
    callerPayout: BigNumberish,
    issuerSig: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "cashCheque(address,address,uint256,bytes,uint256,bytes)"(
    beneficiary: string,
    recipient: string,
    cumulativePayout: BigNumberish,
    beneficiarySig: BytesLike,
    callerPayout: BigNumberish,
    issuerSig: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cashChequeBeneficiary(
    recipient: string,
    cumulativePayout: BigNumberish,
    issuerSig: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "cashChequeBeneficiary(address,uint256,bytes)"(
    recipient: string,
    cumulativePayout: BigNumberish,
    issuerSig: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decreaseHardDeposit(
    beneficiary: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "decreaseHardDeposit(address)"(
    beneficiary: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  defaultHardDepositTimeout(overrides?: CallOverrides): Promise<BigNumber>;

  "defaultHardDepositTimeout()"(overrides?: CallOverrides): Promise<BigNumber>;

  hardDeposits(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber;
      decreaseAmount: BigNumber;
      timeout: BigNumber;
      canBeDecreasedAt: BigNumber;
    }
  >;

  "hardDeposits(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber;
      decreaseAmount: BigNumber;
      timeout: BigNumber;
      canBeDecreasedAt: BigNumber;
    }
  >;

  increaseHardDeposit(
    beneficiary: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "increaseHardDeposit(address,uint256)"(
    beneficiary: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  init(
    _issuer: string,
    _token: string,
    _defaultHardDepositTimeout: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "init(address,address,uint256)"(
    _issuer: string,
    _token: string,
    _defaultHardDepositTimeout: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  issuer(overrides?: CallOverrides): Promise<string>;

  "issuer()"(overrides?: CallOverrides): Promise<string>;

  liquidBalance(overrides?: CallOverrides): Promise<BigNumber>;

  "liquidBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

  liquidBalanceFor(
    beneficiary: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "liquidBalanceFor(address)"(
    beneficiary: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  paidOut(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "paidOut(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  prepareDecreaseHardDeposit(
    beneficiary: string,
    decreaseAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "prepareDecreaseHardDeposit(address,uint256)"(
    beneficiary: string,
    decreaseAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCustomHardDepositTimeout(
    beneficiary: string,
    hardDepositTimeout: BigNumberish,
    beneficiarySig: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setCustomHardDepositTimeout(address,uint256,bytes)"(
    beneficiary: string,
    hardDepositTimeout: BigNumberish,
    beneficiarySig: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  "token()"(overrides?: CallOverrides): Promise<string>;

  totalHardDeposit(overrides?: CallOverrides): Promise<BigNumber>;

  "totalHardDeposit()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalPaidOut(overrides?: CallOverrides): Promise<BigNumber>;

  "totalPaidOut()"(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdraw(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    CASHOUT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    "CASHOUT_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

    CHEQUE_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    "CHEQUE_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

    CUSTOMDECREASETIMEOUT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    "CUSTOMDECREASETIMEOUT_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<string>;

    EIP712DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    "EIP712DOMAIN_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

    balance(overrides?: CallOverrides): Promise<BigNumber>;

    "balance()"(overrides?: CallOverrides): Promise<BigNumber>;

    bounced(overrides?: CallOverrides): Promise<boolean>;

    "bounced()"(overrides?: CallOverrides): Promise<boolean>;

    cashCheque(
      beneficiary: string,
      recipient: string,
      cumulativePayout: BigNumberish,
      beneficiarySig: BytesLike,
      callerPayout: BigNumberish,
      issuerSig: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "cashCheque(address,address,uint256,bytes,uint256,bytes)"(
      beneficiary: string,
      recipient: string,
      cumulativePayout: BigNumberish,
      beneficiarySig: BytesLike,
      callerPayout: BigNumberish,
      issuerSig: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    cashChequeBeneficiary(
      recipient: string,
      cumulativePayout: BigNumberish,
      issuerSig: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "cashChequeBeneficiary(address,uint256,bytes)"(
      recipient: string,
      cumulativePayout: BigNumberish,
      issuerSig: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    decreaseHardDeposit(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "decreaseHardDeposit(address)"(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<void>;

    defaultHardDepositTimeout(overrides?: CallOverrides): Promise<BigNumber>;

    "defaultHardDepositTimeout()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hardDeposits(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        decreaseAmount: BigNumber;
        timeout: BigNumber;
        canBeDecreasedAt: BigNumber;
      }
    >;

    "hardDeposits(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        decreaseAmount: BigNumber;
        timeout: BigNumber;
        canBeDecreasedAt: BigNumber;
      }
    >;

    increaseHardDeposit(
      beneficiary: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "increaseHardDeposit(address,uint256)"(
      beneficiary: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    init(
      _issuer: string,
      _token: string,
      _defaultHardDepositTimeout: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "init(address,address,uint256)"(
      _issuer: string,
      _token: string,
      _defaultHardDepositTimeout: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    issuer(overrides?: CallOverrides): Promise<string>;

    "issuer()"(overrides?: CallOverrides): Promise<string>;

    liquidBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "liquidBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    liquidBalanceFor(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "liquidBalanceFor(address)"(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    paidOut(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "paidOut(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    prepareDecreaseHardDeposit(
      beneficiary: string,
      decreaseAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "prepareDecreaseHardDeposit(address,uint256)"(
      beneficiary: string,
      decreaseAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCustomHardDepositTimeout(
      beneficiary: string,
      hardDepositTimeout: BigNumberish,
      beneficiarySig: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "setCustomHardDepositTimeout(address,uint256,bytes)"(
      beneficiary: string,
      hardDepositTimeout: BigNumberish,
      beneficiarySig: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    token(overrides?: CallOverrides): Promise<string>;

    "token()"(overrides?: CallOverrides): Promise<string>;

    totalHardDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    "totalHardDeposit()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalPaidOut(overrides?: CallOverrides): Promise<BigNumber>;

    "totalPaidOut()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    ChequeBounced(): TypedEventFilter<[], {}>;

    ChequeCashed(
      beneficiary: string | null,
      recipient: string | null,
      caller: string | null,
      totalPayout: null,
      cumulativePayout: null,
      callerPayout: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, BigNumber],
      {
        beneficiary: string;
        recipient: string;
        caller: string;
        totalPayout: BigNumber;
        cumulativePayout: BigNumber;
        callerPayout: BigNumber;
      }
    >;

    HardDepositAmountChanged(
      beneficiary: string | null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber],
      { beneficiary: string; amount: BigNumber }
    >;

    HardDepositDecreasePrepared(
      beneficiary: string | null,
      decreaseAmount: null
    ): TypedEventFilter<
      [string, BigNumber],
      { beneficiary: string; decreaseAmount: BigNumber }
    >;

    HardDepositTimeoutChanged(
      beneficiary: string | null,
      timeout: null
    ): TypedEventFilter<
      [string, BigNumber],
      { beneficiary: string; timeout: BigNumber }
    >;

    Withdraw(
      amount: null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;
  };

  estimateGas: {
    CASHOUT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    "CASHOUT_TYPEHASH()"(overrides?: CallOverrides): Promise<BigNumber>;

    CHEQUE_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    "CHEQUE_TYPEHASH()"(overrides?: CallOverrides): Promise<BigNumber>;

    CUSTOMDECREASETIMEOUT_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "CUSTOMDECREASETIMEOUT_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    EIP712DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    "EIP712DOMAIN_TYPEHASH()"(overrides?: CallOverrides): Promise<BigNumber>;

    balance(overrides?: CallOverrides): Promise<BigNumber>;

    "balance()"(overrides?: CallOverrides): Promise<BigNumber>;

    bounced(overrides?: CallOverrides): Promise<BigNumber>;

    "bounced()"(overrides?: CallOverrides): Promise<BigNumber>;

    cashCheque(
      beneficiary: string,
      recipient: string,
      cumulativePayout: BigNumberish,
      beneficiarySig: BytesLike,
      callerPayout: BigNumberish,
      issuerSig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "cashCheque(address,address,uint256,bytes,uint256,bytes)"(
      beneficiary: string,
      recipient: string,
      cumulativePayout: BigNumberish,
      beneficiarySig: BytesLike,
      callerPayout: BigNumberish,
      issuerSig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cashChequeBeneficiary(
      recipient: string,
      cumulativePayout: BigNumberish,
      issuerSig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "cashChequeBeneficiary(address,uint256,bytes)"(
      recipient: string,
      cumulativePayout: BigNumberish,
      issuerSig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decreaseHardDeposit(
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "decreaseHardDeposit(address)"(
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    defaultHardDepositTimeout(overrides?: CallOverrides): Promise<BigNumber>;

    "defaultHardDepositTimeout()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hardDeposits(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "hardDeposits(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseHardDeposit(
      beneficiary: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "increaseHardDeposit(address,uint256)"(
      beneficiary: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    init(
      _issuer: string,
      _token: string,
      _defaultHardDepositTimeout: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "init(address,address,uint256)"(
      _issuer: string,
      _token: string,
      _defaultHardDepositTimeout: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    issuer(overrides?: CallOverrides): Promise<BigNumber>;

    "issuer()"(overrides?: CallOverrides): Promise<BigNumber>;

    liquidBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "liquidBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    liquidBalanceFor(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "liquidBalanceFor(address)"(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    paidOut(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "paidOut(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    prepareDecreaseHardDeposit(
      beneficiary: string,
      decreaseAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "prepareDecreaseHardDeposit(address,uint256)"(
      beneficiary: string,
      decreaseAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCustomHardDepositTimeout(
      beneficiary: string,
      hardDepositTimeout: BigNumberish,
      beneficiarySig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setCustomHardDepositTimeout(address,uint256,bytes)"(
      beneficiary: string,
      hardDepositTimeout: BigNumberish,
      beneficiarySig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    "token()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalHardDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    "totalHardDeposit()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalPaidOut(overrides?: CallOverrides): Promise<BigNumber>;

    "totalPaidOut()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CASHOUT_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "CASHOUT_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CHEQUE_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "CHEQUE_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CUSTOMDECREASETIMEOUT_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "CUSTOMDECREASETIMEOUT_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    EIP712DOMAIN_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "EIP712DOMAIN_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "balance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bounced(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "bounced()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cashCheque(
      beneficiary: string,
      recipient: string,
      cumulativePayout: BigNumberish,
      beneficiarySig: BytesLike,
      callerPayout: BigNumberish,
      issuerSig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "cashCheque(address,address,uint256,bytes,uint256,bytes)"(
      beneficiary: string,
      recipient: string,
      cumulativePayout: BigNumberish,
      beneficiarySig: BytesLike,
      callerPayout: BigNumberish,
      issuerSig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cashChequeBeneficiary(
      recipient: string,
      cumulativePayout: BigNumberish,
      issuerSig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "cashChequeBeneficiary(address,uint256,bytes)"(
      recipient: string,
      cumulativePayout: BigNumberish,
      issuerSig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decreaseHardDeposit(
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "decreaseHardDeposit(address)"(
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    defaultHardDepositTimeout(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "defaultHardDepositTimeout()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hardDeposits(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hardDeposits(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseHardDeposit(
      beneficiary: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "increaseHardDeposit(address,uint256)"(
      beneficiary: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    init(
      _issuer: string,
      _token: string,
      _defaultHardDepositTimeout: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "init(address,address,uint256)"(
      _issuer: string,
      _token: string,
      _defaultHardDepositTimeout: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    issuer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "issuer()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "liquidBalance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidBalanceFor(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "liquidBalanceFor(address)"(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    paidOut(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "paidOut(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    prepareDecreaseHardDeposit(
      beneficiary: string,
      decreaseAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "prepareDecreaseHardDeposit(address,uint256)"(
      beneficiary: string,
      decreaseAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCustomHardDepositTimeout(
      beneficiary: string,
      hardDepositTimeout: BigNumberish,
      beneficiarySig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setCustomHardDepositTimeout(address,uint256,bytes)"(
      beneficiary: string,
      hardDepositTimeout: BigNumberish,
      beneficiarySig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalHardDeposit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalHardDeposit()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalPaidOut(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalPaidOut()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
